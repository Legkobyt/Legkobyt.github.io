Require Import List.
Import ListNotations.
Require Import Nat.
Require Import Coq.Arith.Peano_dec.
Require Import Bool.

Inductive ParkingState : Type :=
  | Open
  | Closed.

Record parking_state : Type := mkState {
  parkingStatus : ParkingState;
  cars : list nat
}.

Definition Capacity : nat := 10.
Definition MaxCarId : nat := 15.

Definition is_valid_car (carId : nat) : bool :=
  carId <=? MaxCarId.

Definition has_space (s : parking_state) : bool :=
  length (cars s) <? Capacity.

Definition is_parked (carId : nat) (s : parking_state) : bool :=
  List.existsb (Nat.eqb carId) (cars s).

(* Definition for opening the parking *)
Definition openParking (s : parking_state) : option parking_state :=
  match parkingStatus s with
  | Closed => Some (mkState Open (cars s))
  | Open => None
  end.

(* Definition for closing the parking *)
Definition closeParking (s : parking_state) : option parking_state :=
  match parkingStatus s, cars s with
  | Open, [] => Some (mkState Closed [])
  | _, _ => None
  end.

Definition is_open (status : ParkingState) : bool :=
  match status with
  | Open => true
  | Closed => false
  end.

(* Definition for car arrival *)
Definition arrival (carId : nat) (s : parking_state) : option parking_state :=
  if (is_open (parkingStatus s)) &&
     (is_valid_car carId) &&
     (negb (is_parked carId s)) &&
     (has_space s)
  then Some (mkState (parkingStatus s) (carId :: cars s))
  else None.

(* Definition for car departure *)
Definition departure (carId : nat) (s : parking_state) : option parking_state :=
  if (is_open (parkingStatus s)) && (is_parked carId s)
  then Some (mkState (parkingStatus s) (filter (fun x => negb (Nat.eqb x carId)) (cars s)))
  else None.

Definition can_arrive (carId : nat) (s : parking_state) : bool :=
  (is_open (parkingStatus s)) &&
  (is_valid_car carId) &&
  (negb (is_parked carId s)) &&
  (has_space s).

(* Definition of possible next states *)
Definition Next (s : parking_state) : option parking_state :=
  match openParking s with
  | Some s' => Some s'
  | None =>
    match closeParking s with
    | Some s' => Some s'
    | None =>
      match (List.find (fun carId => can_arrive carId s) (seq 0 MaxCarId)) with
      | Some carId => arrival carId s
      | None => None
      end
    end
  end.
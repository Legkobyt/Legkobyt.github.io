  capacity : nat = 10;
  maxCarId : nat = 15;

types
  AutoId = nat1;
  ParkingState = <opened> | <closed>;

state ParkingSystem of
  parkingState : ParkingState
  cars : set of AutoId

-- Invariant definition
-- The number of cars in the parking lot cannot exceed its capacity
-- When the car park is closed, there should be no cars present
inv mk_ParkingSystem(parkingState, cars) ==
  card cars <= capacity and (parkingState = <closed> => card cars = 0)

-- Initial state
init p == p = mk_ParkingSystem(<closed>, {})
end

operations

-- Definition for opening the parking
  openParking()
    ext wr parkingState : ParkingState wr cars : set of AutoId
    pre parkingState = <closed>
    post parkingState = <opened> and cars = cars~;

-- Definition for closing the parking
  closeParking()
    ext wr parkingState : ParkingState wr cars : set of AutoId
    pre parkingState = <opened> and card cars = 0
    post (parkingState = <closed> and cars = {});

-- Definition for car arrival
  arrival(autoId : AutoId)
    ext wr parkingState : ParkingState wr cars : set of AutoId
    pre parkingState = <opened> and
        autoId not in set cars and
        card cars < capacity
    post (cars = cars~ union {autoId} and parkingState = parkingState~);

-- Definition for car departure
  departure(autoId : AutoId)
    ext wr parkingState : ParkingState wr cars : set of AutoId
    pre parkingState = <opened> and autoId in set cars
    post (cars = cars~ \ {autoId} and parkingState = parkingState~);

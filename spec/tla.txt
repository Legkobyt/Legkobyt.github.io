------------------------------ MODULE Parking ------------------------------
EXTENDS Naturals, Sequences, FiniteSets, TLC

CONSTANTS 
    capacity,
    maxCarId

VARIABLES
    parkingState,
    cars

PARKING_STATES == {"opened", "closed"}
AutoIds == 0..maxCarId


\* Initial state
init == 
    /\ parkingState = "closed"
    /\ cars = {}

\* Definition for opening the parking:
openParking == 
    /\ parkingState = "closed"
    /\ parkingState' = "opened"
    /\ UNCHANGED cars

\* Definition for closing the parking
closeParking == 
    /\ parkingState = "opened"
    /\ Cardinality(cars) = 0
    /\ parkingState' = "closed"
    /\ UNCHANGED cars

\* Definition for car arrival:
arrival(autoId) ==  
    /\ parkingState = "opened"
    /\ autoId ∈ AutoIds
    /\ autoId ∉ cars
    /\ Cardinality(cars) < capacity
    /\ cars' = cars ∪ {autoId}
    /\ UNCHANGED parkingState

\* Definition for car departure:
departure(autoId) == 
    /\ parkingState = "opened"
    /\ autoId ∈ cars
    /\ cars' = cars \ {autoId}
    /\ UNCHANGED parkingState


\* Definition of possible next states
next ==  
    \/ openParking
    \/ closeParking
    \/ \E autoId ∈ AutoIds : arrival(autoId)
    \/ \E autoId ∈ cars : departure(autoId)

\*The number of parked cars cannot exceed capacity.
capacityInvariant == Cardinality(cars) ≤ capacity

\* When the parking lot is closed, there should be no cars.
closedInvariant == (parkingState = "closed" => Cardinality(cars) = 0)

\* The parking lot should only be in two states
\* The cars collection belongs to the boundary set of natural numbers
typeInvariant == 
    /\ parkingState ∈ PARKING_STATES
    /\ cars ⊆ AutoIds

\* Invariant definition
invariant == capacityInvariant /\ closedInvariant /\ typeInvariant
=============================================================================

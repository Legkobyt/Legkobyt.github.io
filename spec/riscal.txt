val MaxCarId = 15;
val capacity = 10;

type PS = ℕ[1];
type Id = ℕ[MaxCarId];

pred isClosed(parkingState: PS) ⇔ parkingState = 0;
pred isOpened(parkingState: PS) ⇔ parkingState = 1;

shared system ParkingSystem
{

  var parkingState : PS;
  var cars: Set[Id];

  // Invariant definition
  // The number of cars in the parking lot cannot exceed its capacity.
  invariant |cars| ≤ capacity;
  // When the parking lot is closed, there should be no cars present.
  invariant isClosed(parkingState) ⇒ |cars| = 0;

  // Initial state:
  init()
  {
    parkingState := 0;
    cars := ∅[Id];
  }

  // Definition for opening the parking:
  action openParking() with isClosed(parkingState);
  {
    parkingState := 1;
  }

  // Definition for closing the parking:
  action closeParking() with isOpened(parkingState) ∧ |cars| = 0;
  {
    parkingState := 0;
  }

  // Definition for car arrival:
  action arrival(i: Id) with isOpened(parkingState) ∧ ¬(i ∈ cars) ∧ |cars| < capacity;
  {
    cars := cars ∪ {i};
  }

  // Definition for car departure:
  action departure(i: Id) with isOpened(parkingState) ∧ i ∈ cars;
  {
    cars := cars \ {i};
  }
}
